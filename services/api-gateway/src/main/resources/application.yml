server:
  port: 8080

spring:
  application:
    name: api-gateway
  main:
    web-application-type: reactive
  cloud:
    gateway:
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials
        - AddResponseHeader=X-Gateway,msa-webtoon
      routes:
        - id: ingest
          uri: ${SERVICE_EVENT_INGEST_URL:http://localhost:8101}
          predicates:
            - Path=/ingest/**
          filters:
            - name: CircuitBreaker
              args:
                name: ingestCb
                fallbackUri: forward:/__fallback/ingest
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@ipKeyResolver}"
                redis-rate-limiter.replenishRate: 200   # 초당 200
                redis-rate-limiter.burstCapacity: 400
        - id: rank
          uri: ${SERVICE_RANK_URL:http://localhost:8102}
          predicates:
            - Path=/rank/**
          filters:
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY, GATEWAY_TIMEOUT, SERVICE_UNAVAILABLE
                series: SERVER_ERROR
                methods: GET
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms
                  factor: 2
                  basedOnPreviousValue: true
                exceptions:
                  - java.net.ConnectException
                  - java.net.SocketTimeoutException
                  - io.netty.channel.ConnectTimeoutException
                  - io.netty.handler.timeout.ReadTimeoutException
                  - reactor.netty.http.client.PrematureCloseException
            - name: CircuitBreaker
              args:
                name: rankCb
                fallbackUri: forward:/__fallback/rank
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@ipKeyResolver}"
                redis-rate-limiter.replenishRate: 300
                redis-rate-limiter.burstCapacity: 600
        - id: catalog
          uri: ${SERVICE_CATALOG_URL:http://localhost:8103}
          predicates:
            - Path=/catalog/**
          filters:
            - name: Retry
              args:
                retries: 2
                statuses: BAD_GATEWAY, GATEWAY_TIMEOUT, SERVICE_UNAVAILABLE
                series: SERVER_ERROR
                methods: GET
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 300ms
                  factor: 2
                  basedOnPreviousValue: true
                exceptions:
                  - java.net.ConnectException
                  - java.net.SocketTimeoutException
                  - io.netty.channel.ConnectTimeoutException
                  - io.netty.handler.timeout.ReadTimeoutException
            - name: CircuitBreaker
              args:
                name: catalogCb
                fallbackUri: forward:/__fallback/catalog
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@ipKeyResolver}"
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 200
        - id: search
          uri: ${SERVICE_SEARCH_URL:http://localhost:8104}
          predicates:
            - Path=/search/**
          filters:
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY, GATEWAY_TIMEOUT, SERVICE_UNAVAILABLE
                series: SERVER_ERROR
                methods: GET
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms
                  factor: 2
                  basedOnPreviousValue: true
                exceptions:
                  - java.net.ConnectException
                  - java.net.SocketTimeoutException
                  - io.netty.channel.ConnectTimeoutException
                  - io.netty.handler.timeout.ReadTimeoutException
                  - reactor.netty.http.client.PrematureCloseException
            - name: CircuitBreaker
              args:
                name: searchCb
                fallbackUri: forward:/__fallback/search
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@ipKeyResolver}"
                redis-rate-limiter.replenishRate: 200
                redis-rate-limiter.burstCapacity: 400
        - id: generator
          uri: ${SERVICE_GENERATOR_URL:http://localhost:8083}
          predicates:
            - Path=/generator/**
          filters:
            - name: CircuitBreaker
              args:
                name: generatorCb
                fallbackUri: forward:/__fallback/generator
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@ipKeyResolver}"
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
      httpclient:
        connect-timeout: 3000
        response-timeout: 5s

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}

  webflux:
    base-path: /
    cors:
      mappings:
        "/ingest/**":
          allowed-origins: ${CORS_ALLOWED_ORIGINS:*}
          allowed-methods: "POST,OPTIONS"
          allowed-headers: "Authorization,Content-Type"
          max-age: 3600
        "/rank/**":
          allowed-origins: ${CORS_ALLOWED_ORIGINS:*}
          allowed-methods: "GET,OPTIONS"
          allowed-headers: "Authorization,Content-Type"
          max-age: 3600
        "/catalog/**":
          allowed-origins: ${CORS_ALLOWED_ORIGINS:*}
          allowed-methods: "POST,OPTIONS"
          allowed-headers: "Authorization,Content-Type"
          max-age: 3600
        "/search/**":
          allowed-origins: ${CORS_ALLOWED_ORIGINS:*}
          allowed-methods: "GET,OPTIONS"
          allowed-headers: "Authorization,Content-Type"
          max-age: 3600
        "/generator/**":
          allowed-origins: ${CORS_ALLOWED_ORIGINS:*}
          allowed-methods: "GET,POST,OPTIONS"
          allowed-headers: "Authorization,Content-Type"
          max-age: 3600

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: when_authorized

springdoc:
  swagger-ui:
    enabled: true

  # merge security config into main spring block
security:
  oauth2:
    resourceserver:
      jwt:
        jwk-set-uri: ${AUTH_JWKS_URI:http://localhost:8105/.well-known/jwks.json}

resilience4j:
  circuitbreaker:
    instances:
      ingestCb:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 50
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 2s
        permittedNumberOfCallsInHalfOpenState: 5
        waitDurationInOpenState: 10s
      rankCb:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 50
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 2s
        permittedNumberOfCallsInHalfOpenState: 5
        waitDurationInOpenState: 10s
      catalogCb:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 50
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 2s
        permittedNumberOfCallsInHalfOpenState: 5
        waitDurationInOpenState: 10s
      searchCb:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 50
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 2s
        permittedNumberOfCallsInHalfOpenState: 5
        waitDurationInOpenState: 10s
      generatorCb:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 50
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 2s
        permittedNumberOfCallsInHalfOpenState: 5
        waitDurationInOpenState: 10s
  timelimiter:
    instances:
      ingestCb:
        timeoutDuration: 1s
        cancelRunningFuture: true
      rankCb:
        timeoutDuration: 1s
        cancelRunningFuture: true
      catalogCb:
        timeoutDuration: 1500ms
        cancelRunningFuture: true
      searchCb:
        timeoutDuration: 1500ms
        cancelRunningFuture: true
      generatorCb:
        timeoutDuration: 1s
        cancelRunningFuture: true
