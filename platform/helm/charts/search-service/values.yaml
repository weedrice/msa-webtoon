replicaCount: 2

image:
  repository: msa-webtoon/search-service
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/actuator/prometheus"
  prometheus.io/port: "8084"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false

service:
  type: ClusterIP
  port: 8084

actuator:
  enabled: true
  port: 8084

livenessProbe:
  enabled: true
  path: /actuator/health/liveness
  port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  enabled: true
  path: /actuator/health/readiness
  port: http
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - search-service
        topologyKey: kubernetes.io/hostname

env:
  SPRING_PROFILES_ACTIVE: "prod"
  SERVER_PORT: "8084"
  MANAGEMENT_SERVER_PORT: "8084"
  # OpenSearch configuration
  OPENSEARCH_HOST: "opensearch-service"
  OPENSEARCH_PORT: "9200"
  OPENSEARCH_SCHEME: "http"
  SEARCH_INDEX: "catalog"
  # Kafka consumer configuration
  SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka-service:9092"
  SPRING_KAFKA_CONSUMER_GROUP_ID: "search-service"
  SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: "org.apache.kafka.common.serialization.StringDeserializer"
  SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: "org.springframework.kafka.support.serializer.JsonDeserializer"
  SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TRUSTED_PACKAGES: "*"
  # Index bootstrap configuration
  SEARCH_INDEX_BOOTSTRAP_ENABLED: "true"
  # Logging
  LOGGING_LEVEL_ROOT: "INFO"
  LOGGING_LEVEL_COM_YOORDI: "INFO"

envSecrets: {}
  # AUTH_JWKS_URI:
  #   name: search-service-secrets
  #   key: auth-jwks-uri
  # OPENSEARCH_USERNAME:
  #   name: search-service-secrets
  #   key: opensearch-username
  # OPENSEARCH_PASSWORD:
  #   name: search-service-secrets
  #   key: opensearch-password

config: {}

volumes: []
volumeMounts: []
